//Variables
var spacings = [ [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -100, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 175, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, -40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ], [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ] ], letters = [ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" ];

(function(a, b, c) {
    var d = {
        data: {},
        init: function() {
            console.log("--- Init Stuff ---");
            console.log("-- Headlines --");
            this.data.headlines = this.setHeadlines();
            console.log(this.data.headlines);
            console.log("-- Pairs --");
            this.setPairs();
            console.log("-- Parsing to HTML --");
            this.renderHTML();
            console.log(this.data);
            return this;
        },
        setHeadlines: function() {
            var b = a.getElementsByTagName("h1"), d = a.getElementsByTagName("h2"), e = a.getElementsByTagName("h3"), f = a.getElementsByTagName("h4"), g = a.getElementsByTagName("h5"), h = a.getElementsByTagName("h6"), i = [ b, d, e, f, g, h ], j = [];
            for (var k = 0; k < i.length; k++) for (var l = 0; l < i[k].length; l++) {
                console.log(i[k][l]);
                var m = i[k][l].innerText;
                m === c && (m = i[k][l].textContent);
                j.push({
                    headline: i[k][l],
                    hierarchy: k + 1,
                    text: m
                });
            }
            return j;
        },
        setPairs: function() {
            if (this.data.headlines === c) return !1;
            for (var a = 0; a < this.data.headlines.length; a++) {
                var b = this.data.headlines[a], d = this.data.headlines[a].text, e = [];
                for (var f = 0; f < d.length - 1; f++) {
                    var g = d[f], h = d[f + 1], i = letters.indexOf(g), j = letters.indexOf(h);
                    e.push({
                        pair: g + h,
                        firstnum: i,
                        secondnum: j,
                        spacing: spacings[i][j]
                    });
                }
                this.data.headlines[a].pairs = e;
                console.log(b);
            }
        },
        renderHTML: function() {
            if (this.data.headlines[0].pairs === c) return !1;
            var b = this.data.headlines;
            for (var d = 0; d < b.length; d++) {
                var e = b[d], f = [];
                for (var g = 0; g < e.pairs.length; g++) {
                    var h = e.pairs[g], i = a.createElement("span"), j = h.spacing / 1e3;
                    i.innerText = h.pair[0];
                    i.style.marginRight = j + "em";
                    f.push(i);
                }
                var k = a.createElement("span");
                k.innerText = e.pairs[e.pairs.length - 1].pair[1];
                f.push(k);
                e.headline.innerText = "";
                for (var l = 0; l < f.length; l++) e.headline.appendChild(f[l]);
                console.log(e);
            }
        },
        visual: function() {
            var b = a.createElement("table");
            for (var c = -1; c < spacings.length; c++) {
                var d = a.createElement("tr");
                if (c === -1) for (var e = -1; e < spacings[0].length; e++) if (e === -1) {
                    var f = a.createElement("th");
                    d.appendChild(f);
                } else {
                    var g = a.createElement("th"), h = a.createTextNode(letters[e]);
                    g.appendChild(h);
                    d.appendChild(g);
                } else for (var i = -1; i < spacings[0].length; i++) if (i === -1) {
                    var j = a.createElement("td"), k = a.createTextNode(letters[c]);
                    j.appendChild(k);
                    d.appendChild(j);
                } else {
                    var l = a.createElement("td"), m = a.createTextNode(spacings[c][i]);
                    l.appendChild(m);
                    d.appendChild(l);
                }
                b.appendChild(d);
            }
            document.body.appendChild(b);
        }
    }.init().visual();
})(document, window);